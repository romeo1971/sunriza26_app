rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {
    // Helper Functions (Struppi-System)
    function signedIn() { return request.auth != null; }
    function isOwner(data) { return signedIn() && data.userId == request.auth.uid; }
    function validTimestamp(ts) { return ts is int && ts > 0; }
    function validString(s, min, max) { return s is string && s.size() >= min && s.size() <= max; }
    function stringList(l, maxItems, maxLen) {
      return l is list && l.size() <= maxItems && l.hasOnly(l.where(e, e is string && e.size() <= maxLen));
    }
    function isAdmin() {
      return signedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    // Video-Provider prüfen
    function allowedVideoProvider(p) {
      return p in ['bithuman', 'bp', 'beyond_presence'];
    }

    // User-Dokumente (Struppi-System)
    match /users/{uid} {
      allow get, create, update, delete: if signedIn() && uid == request.auth.uid;
    }

    // Avatar-Dokumente (Struppi-System)
    match /avatars/{avatarId} {
      // Create mit minimalen Pflichtfeldern + optionalen Medienfeldern
      allow create: if signedIn()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasOnly([
          'id','userId','firstName','nickname','lastName',
          'birthDate','deathDate','calculatedAge','avatarImageUrl',
          'imageUrls','videoUrls','textFileUrls','audioUrls','writtenTexts',
          'lastMessage','lastMessageTime','createdAt','updatedAt','isPublic',
          'training'
        ])
        && validString(request.resource.data.firstName, 1, 100)
        && validTimestamp(request.resource.data.createdAt)
        && validTimestamp(request.resource.data.updatedAt)
        // Optionale Felder – Typ nur prüfen, wenn vorhanden
        && (!('nickname' in request.resource.data) || validString(request.resource.data.nickname, 0, 100))
        && (!('lastName' in request.resource.data) || validString(request.resource.data.lastName, 0, 100))
        && (!('avatarImageUrl' in request.resource.data) || validString(request.resource.data.avatarImageUrl, 1, 2000))
        && (!('birthDate' in request.resource.data) || request.resource.data.birthDate is int)
        && (!('deathDate' in request.resource.data) || request.resource.data.deathDate is int)
        && (!('calculatedAge' in request.resource.data) || request.resource.data.calculatedAge is int)
        && (!('lastMessage' in request.resource.data) || validString(request.resource.data.lastMessage, 0, 1000))
        && (!('lastMessageTime' in request.resource.data) || request.resource.data.lastMessageTime is int)
        && (!('imageUrls' in request.resource.data) || request.resource.data.imageUrls is list)
        && (!('videoUrls' in request.resource.data) || request.resource.data.videoUrls is list)
        && (!('textFileUrls' in request.resource.data) || request.resource.data.textFileUrls is list)
        && (!('audioUrls' in request.resource.data) || request.resource.data.audioUrls is list)
        && (!('writtenTexts' in request.resource.data) || request.resource.data.writtenTexts is list)
        && (!('isPublic' in request.resource.data) || request.resource.data.isPublic is bool)
        && (!('training' in request.resource.data) || request.resource.data.training is map);

      allow get, list: if isOwner(resource.data) || (resource.data.isPublic == true);
      // Allgemeines Update (bestehend)
      allow update: if (
          isOwner(resource.data)
          && request.resource.data.userId == resource.data.userId
          && request.resource.data.id == resource.data.id
          && validTimestamp(request.resource.data.updatedAt)
        )
        || (
          // Minimaler Spezialfall: Nur Video-Provider (und optional updatedAt) wird geändert
          isOwner(resource.data)
          && request.resource.data.userId == resource.data.userId
          && request.resource.data.id == resource.data.id
          && request.resource.data.training is map
          && request.resource.data.training.videoProvider is string
          && allowedVideoProvider(request.resource.data.training.videoProvider)
          && request.resource.data.diff(resource.data).changedKeys().hasOnly(['training','updatedAt'])
          && (!('updatedAt' in request.resource.data) || validTimestamp(request.resource.data.updatedAt))
        );
      allow delete: if isOwner(resource.data);
    }

    // Avatar Freetexts (Struppi-System)
    match /avatars/{avatarId}/freetexts/{docId} {
      allow create: if signedIn()
        && isOwner(get(/databases/$(db)/documents/avatars/$(avatarId)).data)
        && request.resource.data.keys().hasOnly(['userId','text','createdAt'])
        && request.resource.data.userId == request.auth.uid
        && validString(request.resource.data.text, 1, 20000)
        && validTimestamp(request.resource.data.createdAt);

      allow get, list, update, delete:
        if isOwner(get(/databases/$(db)/documents/avatars/$(avatarId)).data);
    }
    
    // Legal Pages - öffentlich lesbar, nur Admins können schreiben
    match /legal_pages/{type} {
      allow read: if true; // Öffentlich lesbar
      allow write: if signedIn() && isAdmin();
    }

    // Chat Messages (Struppi-System)
    match /chats/{chatId}/messages/{messageId} {
      allow create: if signedIn()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasOnly(['userId','text','timestamp','type'])
        && validString(request.resource.data.text, 1, 10000)
        && validTimestamp(request.resource.data.timestamp)
        && request.resource.data.type in ['user', 'avatar'];

      allow get, list: if signedIn() && 
        (resource.data.userId == request.auth.uid || 
         isOwner(get(/databases/$(db)/documents/avatars/$(chatId)).data));
    }

    // User Settings (Struppi-System)
    match /user_settings/{uid} {
      allow get, create, update, delete: if signedIn() && uid == request.auth.uid;
    }

    // Notifications (Struppi-System)
    match /notifications/{notificationId} {
      allow create: if signedIn()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasOnly(['userId','title','message','type','read','createdAt'])
        && validString(request.resource.data.title, 1, 200)
        && validString(request.resource.data.message, 1, 1000)
        && validTimestamp(request.resource.data.createdAt)
        && request.resource.data.read is bool;

      allow get, list, update: if signedIn() && resource.data.userId == request.auth.uid;
      allow delete: if signedIn() && resource.data.userId == request.auth.uid;
    }

    // Analytics (Struppi-System)
    match /analytics/{docId} {
      allow create: if signedIn()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasOnly(['userId','event','data','timestamp'])
        && validString(request.resource.data.event, 1, 100)
        && validTimestamp(request.resource.data.timestamp);

      allow get, list: if signedIn() && resource.data.userId == request.auth.uid;
    }
  }
}


