rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper Functions (Struppi-System)
    function signedIn() { return request.auth != null; }
    function isOwner(userId) { return signedIn() && request.auth.uid == userId; }
    function isValidFileType() {
      return request.resource.contentType.matches('image/.*') ||
             request.resource.contentType.matches('video/.*') ||
             request.resource.contentType.matches('audio/.*') ||
             // explizite Allowlist für Dokumente
             request.resource.contentType in [
               'application/pdf',
               'text/plain',
               'text/rtf',
               'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
               'application/vnd.openxmlformats-officedocument.presentationml.presentation'
             ];
    }
    function isValidFileSize() {
      return request.resource.size < 50 * 1024 * 1024; // 50MB limit
    }

    // Avatar Files (Struppi-System)
    // Allgemein für alle Avatar-Uploads (Images/Videos/Audio/etc.)
    match /avatars/{avatarId}/{allPaths=**} {
      allow read: if true;
      allow write, delete: if signedIn() &&
                      (
                        (firestore.exists(/databases/(default)/documents/avatars/$(avatarId)) &&
                         firestore.get(/databases/(default)/documents/avatars/$(avatarId)).data.userId == request.auth.uid) ||
                        firestore.exists(/databases/(default)/documents/users/$(request.auth.uid)/avatars/$(avatarId))
                      ) &&
                      (resource == null || true) && // allow delete without file type check
                      (request.operation == 'delete' || (isValidFileType() && isValidFileSize()));
    }

    // Zusätzliche Auflage NUR für Dokumente: Content-Disposition muss gesetzt sein
    match /avatars/{avatarId}/documents/{file} {
      allow read: if true;
      allow write, delete: if signedIn() &&
                      (
                        (firestore.exists(/databases/(default)/documents/avatars/$(avatarId)) &&
                         firestore.get(/databases/(default)/documents/avatars/$(avatarId)).data.userId == request.auth.uid) ||
                        firestore.exists(/databases/(default)/documents/users/$(request.auth.uid)/avatars/$(avatarId))
                      ) &&
                      (request.operation == 'delete' || (isValidFileType() && isValidFileSize() && request.resource.metadata.contentDisposition.matches('attachment; filename=.*')));
    }

    // User Profile Images (Struppi-System)
    match /users/{userId}/images/profileImage/{allPaths=**} {
      allow read: if true; // Public read
      allow write, delete: if signedIn() && request.auth.uid == userId;
    }

    // User Uploads (Legacy-Fallback ohne avatarId)
    match /users/{userId}/uploads/{allPaths=**} {
      allow read: if true; // Public read
      allow write, delete: if isOwner(userId) && isValidFileType() && isValidFileSize();
    }

    // Chat Files (Struppi-System)
    match /chats/{chatId}/files/{allPaths=**} {
      allow read, write: if signedIn() && isValidFileType() && isValidFileSize();
    }

    // Legal Pages Files (Struppi-System)
    match /legal_pages/{type}/{allPaths=**} {
      allow read: if true; // Öffentlich lesbar
      allow write: if signedIn() && isValidFileType() && isValidFileSize();
    }

    // Analytics Files (Struppi-System)
    match /analytics/{userId}/{allPaths=**} {
      allow read, write: if isOwner(userId) && isValidFileType() && isValidFileSize();
    }

    // Public Assets (Struppi-System)
    match /public/{allPaths=**} {
      allow read: if true; // Öffentlich lesbar
      allow write: if signedIn() && isValidFileType() && isValidFileSize();
    }
  }
}


