import 'package:flutter/material.dart';

/// Icon-Picker Dialog f√ºr Hero Chat Highlights
/// Wird AN der Chat-Blase positioniert beim Tap
class HeroChatIconPicker extends StatefulWidget {
  final String? selectedIcon;
  final Function(String) onIconSelected;
  final VoidCallback onClose;
  final bool alignRight; // true = User (rechts), false = Avatar (links)
  final VoidCallback? onDelete; // Nachricht l√∂schen
  final VoidCallback? onMultiDeleteStart; // Mehrere Nachrichten l√∂schen
  const HeroChatIconPicker({
    super.key,
    this.selectedIcon,
    required this.onIconSelected,
    required this.onClose,
    required this.alignRight,
    this.onDelete,
    this.onMultiDeleteStart,
  });

  @override
  State<HeroChatIconPicker> createState() => _HeroChatIconPickerState();

  /// Zeigt den Icon-Picker Dialog AN der Blase
  static void showAtPosition(
    BuildContext context, {
    required Offset position,
    required bool alignRight,
    String? selectedIcon,
    required Function(String) onIconSelected,
    required VoidCallback onRemove,
    VoidCallback? onDelete,
    VoidCallback? onMultiDeleteStart,
  }) {
    final overlay = Overlay.of(context);
    late OverlayEntry entry;

    entry = OverlayEntry(
      builder: (context) => Stack(
        children: [
          // Tap ins Leere schlie√üt den Dialog
          Positioned.fill(
            child: GestureDetector(
              onTap: () => entry.remove(),
              child: Container(color: Colors.transparent),
            ),
          ),
          // Icon-Picker AN der Blase positioniert
          Positioned(
            left: alignRight ? null : position.dx,
            right: alignRight ? MediaQuery.of(context).size.width - position.dx : null,
            top: position.dy,
            child: Material(
              color: Colors.transparent,
              child: HeroChatIconPicker(
                selectedIcon: selectedIcon,
                alignRight: alignRight,
                onIconSelected: (icon) {
                  onIconSelected(icon);
                  entry.remove();
                },
                onClose: () {
                  if (selectedIcon != null) {
                    onRemove();
                  }
                  entry.remove();
                },
                onDelete: onDelete != null ? () {
                  onDelete();
                  entry.remove();
                } : null,
              ),
            ),
          ),
        ],
      ),
    );

    overlay.insert(entry);
  }

  /// Zeigt den Icon-Picker zentriert √ºber dem Chat
  static void showCentered(
    BuildContext context, {
    required bool alignRight,
    String? selectedIcon,
    required Function(String) onIconSelected,
    required VoidCallback onRemove,
    VoidCallback? onDelete,
    VoidCallback? onMultiDeleteStart,
  }) {
    final overlay = Overlay.of(context);
    late OverlayEntry entry;

    entry = OverlayEntry(
      builder: (context) => Stack(
        children: [
          // Tap ins Leere schlie√üt den Dialog
          Positioned.fill(
            child: GestureDetector(
              onTap: () => entry.remove(),
              child: Container(color: Colors.transparent),
            ),
          ),
          // Zentrierter Picker
          Positioned.fill(
            child: Center(
              child: Material(
                color: Colors.transparent,
                child: HeroChatIconPicker(
                  selectedIcon: selectedIcon,
                  alignRight: alignRight,
                  onIconSelected: (icon) {
                    onIconSelected(icon);
                    entry.remove();
                  },
                  onClose: () {
                    if (selectedIcon != null) {
                      onRemove();
                    }
                    entry.remove();
                  },
                  onDelete: onDelete != null ? () {
                    onDelete();
                    entry.remove();
                  } : null,
                ),
              ),
            ),
          ),
        ],
      ),
    );

    overlay.insert(entry);
  }
}

class _HeroChatIconPickerState extends State<HeroChatIconPicker> {
  bool _showDeleteConfirm = false;

  static const List<String> _icons = [
    'üê£', 'üî•', 'üçª', 'üåà', 'üçÄ', '‚ù§Ô∏è', 'üòÇ', 'üò±', 'üí™', 'üëç',
    'ü•∞', 'ü•≥', 'üòò', 'üññ', 'üò¢', 'üò°', 'ü§Ø', 'ü§Æ', 'ü´∂', 'üôå',
    'üëè', 'üòé', 'ü§™', 'ü§ì',
  ];

  @override
  Widget build(BuildContext context) {
    return Container(
      constraints: const BoxConstraints(maxWidth: 240),
      padding: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: Colors.black.withValues(alpha: 0.85),
        borderRadius: BorderRadius.circular(10),
        border: Border.all(
          color: Colors.white.withValues(alpha: 0.2),
          width: 1,
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.4),
            blurRadius: 16,
            offset: const Offset(0, -2),
          ),
        ],
      ),
      child: _showDeleteConfirm ? _buildDeleteConfirm() : _buildIconPicker(),
    );
  }

  Widget _buildIconPicker() {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        // Icons Grid (kompakter)
        Wrap(
          spacing: 4,
          runSpacing: 4,
          alignment: WrapAlignment.center,
          children: _icons.map((icon) => _buildIconButton(icon)).toList(),
        ),
        // Remove Button (wenn Icon bereits gesetzt)
        if (widget.selectedIcon != null) ...[
          const SizedBox(height: 6),
          _buildRemoveButton(),
        ],
        // Delete Button (Nachricht l√∂schen)
        if (widget.onDelete != null) ...[
          const SizedBox(height: 6),
          _buildDeleteButton(),
        ],
        // Multi-Delete Button (Mehrere Nachrichten l√∂schen)
        if (widget.onMultiDeleteStart != null) ...[
          const SizedBox(height: 6),
          _buildMultiDeleteButton(),
        ],
      ],
    );
  }

  Widget _buildDeleteConfirm() {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        const Text(
          'Nachricht l√∂schen?',
          style: TextStyle(color: Colors.white, fontSize: 16, fontWeight: FontWeight.w600),
        ),
        const SizedBox(height: 8),
        const Text(
          'Diese Nachricht wird dauerhaft gel√∂scht.',
          style: TextStyle(color: Colors.white70, fontSize: 12),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 12),
        Row(
          children: [
            Expanded(
              child: GestureDetector(
                onTap: () => setState(() => _showDeleteConfirm = false),
                child: Container(
                  padding: const EdgeInsets.symmetric(vertical: 8),
                  decoration: BoxDecoration(
                    color: Colors.white.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(6),
                  ),
                  child: const Text(
                    'Abbrechen',
                    style: TextStyle(color: Colors.white70, fontSize: 13),
                    textAlign: TextAlign.center,
                  ),
                ),
              ),
            ),
            const SizedBox(width: 8),
            Expanded(
              child: GestureDetector(
                onTap: () {
                  if (widget.onDelete != null) widget.onDelete!();
                },
                child: Container(
                  padding: const EdgeInsets.symmetric(vertical: 8),
                  decoration: BoxDecoration(
                    color: Colors.red.withValues(alpha: 0.3),
                    borderRadius: BorderRadius.circular(6),
                    border: Border.all(color: Colors.red.withValues(alpha: 0.6)),
                  ),
                  child: const Text(
                    'L√∂schen',
                    style: TextStyle(color: Colors.red, fontSize: 13, fontWeight: FontWeight.w600),
                    textAlign: TextAlign.center,
                  ),
                ),
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildIconButton(String icon) {
    final isSelected = widget.selectedIcon == icon;
    return GestureDetector(
      onTap: () => widget.onIconSelected(icon),
      child: Container(
        width: 34,
        height: 34,
        decoration: BoxDecoration(
          color: isSelected
              ? Colors.white.withValues(alpha: 0.2)
              : Colors.transparent,
          borderRadius: BorderRadius.circular(6),
          border: isSelected
              ? Border.all(
                  color: Colors.white.withValues(alpha: 0.5),
                  width: 1.5,
                )
              : null,
        ),
        child: Center(
          child: Text(
            icon,
            style: const TextStyle(fontSize: 20),
          ),
        ),
      ),
    );
  }

  Widget _buildRemoveButton() {
    return GestureDetector(
      onTap: widget.onClose,
      child: Container(
        width: double.infinity,
        padding: const EdgeInsets.symmetric(vertical: 6, horizontal: 8),
        decoration: BoxDecoration(
          color: Colors.red.withValues(alpha: 0.2),
          borderRadius: BorderRadius.circular(6),
          border: Border.all(
            color: Colors.red.withValues(alpha: 0.4),
            width: 1,
          ),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          mainAxisSize: MainAxisSize.min,
          children: [
            const Icon(Icons.close, color: Colors.red, size: 14),
            const SizedBox(width: 4),
            const Text(
              'Auswahl aufheben',
              style: TextStyle(
                color: Colors.red,
                fontSize: 11,
                fontWeight: FontWeight.w600,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDeleteButton() {
    return GestureDetector(
      onTap: () => setState(() => _showDeleteConfirm = true),
      child: Container(
        width: double.infinity,
        padding: const EdgeInsets.symmetric(vertical: 6, horizontal: 8),
        decoration: BoxDecoration(
          color: Colors.red.withValues(alpha: 0.3),
          borderRadius: BorderRadius.circular(6),
          border: Border.all(
            color: Colors.red.withValues(alpha: 0.6),
            width: 1,
          ),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          mainAxisSize: MainAxisSize.min,
          children: [
            const Icon(Icons.delete_outline, color: Colors.red, size: 14),
            const SizedBox(width: 4),
            const Text(
              'Nachricht l√∂schen',
              style: TextStyle(
                color: Colors.red,
                fontSize: 11,
                fontWeight: FontWeight.w600,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMultiDeleteButton() {
    return GestureDetector(
      onTap: widget.onMultiDeleteStart,
      child: Container(
        width: double.infinity,
        padding: const EdgeInsets.symmetric(vertical: 6, horizontal: 8),
        decoration: BoxDecoration(
          color: Colors.orange.withValues(alpha: 0.2),
          borderRadius: BorderRadius.circular(6),
          border: Border.all(
            color: Colors.orange.withValues(alpha: 0.5),
            width: 1,
          ),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          mainAxisSize: MainAxisSize.min,
          children: [
            const Icon(Icons.checklist, color: Colors.orange, size: 14),
            const SizedBox(width: 4),
            const Text(
              'Mehrere Nachrichten l√∂schen',
              style: TextStyle(
                color: Colors.orange,
                fontSize: 11,
                fontWeight: FontWeight.w600,
              ),
            ),
          ],
        ),
      ),
    );
  }
}


